# -*- coding: utf-8 -*-
"""
Created on Mon Nov 29 17:26:56 2021

@author: vonGostev
"""
import numpy as np

# ------------------------------
# Матричный вариант
# ------------------------------


def filter_img_dct(
        img: np.ndarray, dct_dim: int = -1,
        filter_ampl: float = 10., method: str = 'mul'):
    """
    Фильтрация пространственных частот изображения в базисе
    дискретного косинусного преобразования.
    Имитация JPEG сжатия

    Parameters
    ----------
    img : np.ndarray
        Массив изображения.
    dct_dim : int, optional
        Число векторов для разложения. The default is -1.
    filter_ampl : float, optional
        Амплитуда фильтрации.
        Если амплитуда компоненты меньше нее, то она зануляется.
        The default is 10.
    method : str, optional = ['mul', 'lstsq']
        Метод разложения изображения. The default is 'mul'.

    Returns
    -------
    img_filtered : np.ndarray
        Изображение с фильтрованными спектральными компонентами.

    """
    pass


def dct_matrix(dims: tuple) -> np.ndarray:
    """
    Генерация матрицы базисных векторов дискретного косинусного преобразования.

    Parameters
    ----------
    dims : tuple
        Размерность матрицы базисных векторов
        дискретного косинусного преобразования.

    Returns
    -------
    _dct_matrix : np.ndarray
        Матрица базисных векторов дискретного косинусного преобразования.

    """
    pass


def deconstruct_image(
        img: np.ndarray,
        base_vecs: np.ndarray) -> np.ndarray:
    """
    Генерация коэффициентов разложения изображения
    в градациях серого по базисным векторам
    некоторого преобразования.

    Для минимизации отклонения изображения
    в базисе некоторого преобразования относительно
    исходного используется матричный метод
    для поиска коэффициентов разложения.

    Parameters
    ----------
    img : np.ndarray
        Массив изображения.
    base_vecs : np.ndarray
        Набор базисных векторов (изображений).

    Returns
    -------
    base_coeffs : np.ndarray
        Набор коэффициентов разложения
        `img` по `base_vecs`.

    """
    pass


# ------------------------------
# Итеративный вариант
# ------------------------------

def filter_img_dct(
        img: np.ndarray, dct_dim: int = -1,
        filter_ampl: float = 10.):
    """
    Итеративная фильтрация пространственных частот изображения в базисе
    дискретного косинусного преобразования для больших изображений.
    Имитация JPEG сжатия

    Parameters
    ----------
    img : np.ndarray
        Массив изображения.
    dct_dim : int, optional
        Число векторов для разложения. The default is -1.
    filter_ampl : float, optional
        Амплитуда фильтрации.
        Если амплитуда компоненты меньше нее, то она зануляется.
        The default is 10.

    Returns
    -------
    img_filtered : np.ndarray
        Изображение с фильтрованными спектральными компонентами.

    """
    pass


def dct_matrix(dims: tuple) -> np.ndarray:
    """
    Генератор матрицы базисных векторов дискретного косинусного преобразования.

    Parameters
    ----------
    dims : tuple
        Размерность матрицы базисных векторов
        дискретного косинусного преобразования.

    Returns
    -------
    yield generator
        Генератор матрицы базисных векторов дискретного косинусного преобразования.

    """
    pass


def deconstruct_image(
        img: np.ndarray,
        base_vecs: object) -> np.ndarray:
    """
    Генерация коэффициентов разложения изображения
    в градациях серого по базисным векторам
    некоторого преобразования.

    Для минимизации отклонения изображения
    в базисе некоторого преобразования относительно
    исходного используется матричный метод
    для поиска коэффициентов разложения.

    Parameters
    ----------
    img : np.ndarray
        Массив изображения.
    base_vecs : generator
        Генератор базисных векторов (изображений).

    Returns
    -------
    base_coeffs : np.ndarray
        Набор коэффициентов разложения
        `img` по `base_vecs`.

    """
    pass
